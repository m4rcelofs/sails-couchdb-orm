*** index.js	2016-03-18 14:25:53.851528197 -0300
--- ../../../../sails-couchdb-sensible/index.js	2016-01-22 22:22:19.000000000 -0200
***************
*** 1,9 ****
! var nano       = require('nano');
! var async			 = require('async');
! var extend     = require('xtend');
! var cookie     = require('cookie');
! var DeepMerge  = require('deep-merge');
! var _					 = require('underscore');
  
  var merge = DeepMerge(function(a, b) {
    return b;
--- 1,9 ----
! var nano      = require('nano');
! var async     = require('async');
! var extend    = require('xtend');
! var cookie    = require('cookie');
! var DeepMerge = require('deep-merge');
! var _         = require('underscore');
  
  var merge = DeepMerge(function(a, b) {
    return b;
***************
*** 121,146 ****
    var url = urlForConfig(connection);
    var db = nano(url);
  
! 	// Save the connection
! 	registry.connection(connection.identity,connection);
  
! 	//console.log("Start registering connection");
! 	//console.log(Object.keys(collections));
! 	async.each(Object.keys(collections),function(model,cb) {
! 		//console.log("Register "+model);
! 		adapter.registerSingleCollection(connection,model,collections[model],cb);
! 	},function(err) {
! 		//console.log("Done registering connection");
! 		//console.log(err);
! 		if(err) {
! 			//console.log("Problem!");
! 			cb(new Error("Problem when registering Collections"));
! 		}
! 		else {
! 			//console.log("Success registering connections!");
! 			cb();
! 		}
! 	});
  };
  
  /**
--- 121,144 ----
    var url = urlForConfig(connection);
    var db = nano(url);
  
!   // Save the connection
!   registry.connection(connection.identity,connection);
  
!   //console.log(Object.keys(collections));
!   async.each(Object.keys(collections),function(model,cb) {
!     //console.log("Register "+model);
!     adapter.registerSingleCollection(connection,model,collections[model],cb);
!   }, function(err) {
!     //console.log(err);
!     if(err) {
!       //console.log("Problem!");
!       cb(new Error("Problem when registering Collections"));
!     }
!     else {
!       //console.log("Success registering connections!");
!       cb();
!     }
!   });
  };
  
  /**
***************
*** 171,181 ****
  
    function createdDB(err) {
      if (err) {
! 			cb(err);
! 		}
      else {
! 			adapter.registerSingleCollection(connection, collectionName, collection, cb);
! 		}
    }
  };
  
--- 169,179 ----
  
    function createdDB(err) {
      if (err) {
!       cb(err);
!     }
      else {
!       adapter.registerSingleCollection(connection, collectionName, collection, cb);
!     }
    }
  };
  
***************
*** 205,211 ****
  adapter.describe = function describe(connection, collectionName, cb) {
    var collection = registry.collection(collectionName);
    if (! collection) 
! 		return cb(new Error('no such collection'));
  
    return cb(null, collection.definition);
  };
--- 203,209 ----
  adapter.describe = function describe(connection, collectionName, cb) {
    var collection = registry.collection(collectionName);
    if (! collection) 
!     return cb(new Error('no such collection'));
  
    return cb(null, collection.definition);
  };
***************
*** 223,231 ****
   * @return {[type]}                  [description]
   */
  adapter.drop = function drop(connectionName, collectionName, relations, cb) {
!   var url = urlForConfig(connectionName);
    var db = nano(url);
- 
    db.db.destroy(collectionName, cb);
  };
  
--- 221,229 ----
   * @return {[type]}                  [description]
   */
  adapter.drop = function drop(connectionName, collectionName, relations, cb) {
!   var connection = registry.connection(connectionName);
!   var url = urlForConfig(connection);
    var db = nano(url);
    db.db.destroy(collectionName, cb);
  };
  
***************
*** 257,271 ****
    if (options.skip) dbOptions.skip = options.skip;
  
    var queriedAttributes = Object.keys(options.where || {});
! 	//console.log("Queried Attributes: ",queriedAttributes);
  
    if (queriedAttributes.length == 0) {
! 		//console.log("Queried Attributes doesn't contain any values");
      /// All docs
      dbOptions.include_docs = true;
      db.list(dbOptions, listReplied);
    } else if (queriedAttributes.length == 1 && (queriedAttributes[0] == 'id' || queriedAttributes[0] == '_id')) {
! 		var id = options.where.id || options.where._id;
  
      /// One doc by id
      db.get(id, dbOptions, function(err, doc) {
--- 255,269 ----
    if (options.skip) dbOptions.skip = options.skip;
  
    var queriedAttributes = Object.keys(options.where || {});
!   //console.log("Queried Attributes: ",queriedAttributes);
  
    if (queriedAttributes.length == 0) {
!     //console.log("Queried Attributes doesn't contain any values");
      /// All docs
      dbOptions.include_docs = true;
      db.list(dbOptions, listReplied);
    } else if (queriedAttributes.length == 1 && (queriedAttributes[0] == 'id' || queriedAttributes[0] == '_id')) {
!     var id = options.where.id || options.where._id;
  
      /// One doc by id
      db.get(id, dbOptions, function(err, doc) {
***************
*** 279,292 ****
        }
      });
    } else if (options.where.like) {
! 		//console.log("Query by where: ",options.where.like);
      var viewName = views.name(options.where.like);
      var value = views.likeValue(options.where.like, true);
      dbOptions.startkey = value.startkey;
      dbOptions.endkey = value.endkey;
      db.view('views', viewName, dbOptions, viewResult);
    } else {
! 		//console.log("Lets look with a view: ",options.where);
      var viewName = views.name(options.where);
      dbOptions.key = views.value(options.where);
      db.view('views', viewName, dbOptions, viewResult);
--- 277,290 ----
        }
      });
    } else if (options.where.like) {
!     //console.log("Query by where: ",options.where.like);
      var viewName = views.name(options.where.like);
      var value = views.likeValue(options.where.like, true);
      dbOptions.startkey = value.startkey;
      dbOptions.endkey = value.endkey;
      db.view('views', viewName, dbOptions, viewResult);
    } else {
!     //console.log("Lets look with a view: ",options.where);
      var viewName = views.name(options.where);
      dbOptions.key = views.value(options.where);
      db.view('views', viewName, dbOptions, viewResult);
***************
*** 353,382 ****
   */
  adapter.update = function update(connectionName, collectionName, options, values, cb) {
  
- 	adapter.merge(connectionName,collectionName,values.id,values,replied,1);
- 	/*
- 	adapter.merge = function adapterMerge(connectionName, collectionName, id, attrs, cb, attempts) {
- 
    var searchAttributes = Object.keys(options.where);
    if (searchAttributes.length != 1)
      return cb(new Error('only support updating one object by id'));
    if (searchAttributes[0] != 'id')
      return cb(new Error('only support updating one object by id'));
  
!   var db = registry.db(collectionName);
! 
! 	console.log("Saving "+collectionName+" with id ",options,values);
! 
!   db.insert(docForIngestion(values), options.where.id, replied);
! 	*/
  
!   function replied(err, reply) {
!     if (err) cb(err);
!     else {
!       var attrs = extend({}, values, { _id: reply.id, _rev: reply.rev });
!       cb(null, docForReply(attrs));
!     }
!   }
  };
  
  
--- 351,382 ----
   */
  adapter.update = function update(connectionName, collectionName, options, values, cb) {
  
    var searchAttributes = Object.keys(options.where);
    if (searchAttributes.length != 1)
      return cb(new Error('only support updating one object by id'));
    if (searchAttributes[0] != 'id')
      return cb(new Error('only support updating one object by id'));
  
!   // Find the document
!   adapter.find(connectionName, collectionName, options, function(err,docs) {
!     var doc = docs[0]; // only one document with that id
!     if(!doc) return cb('No document found to update.');
! 
!     delete values.id; // deleting id from values attr
!     Object.keys(values).forEach(function(key) {
!       doc[key] = values[key];
!     });
  
!     //console.log('Document to update: ', doc);
!     var db = registry.db(collectionName);
!     db.insert(docForIngestion(doc), options.where.id, function(err, reply) {
!       if (err) cb(err);
!       else {
!         var attrs = extend({}, doc, { _id: reply.id, _rev: reply.rev });
!         cb(null, docForReply(attrs));
!       }
!     });
!   });
  };
  
  
***************
*** 390,402 ****
   * @return {[type]}                  [description]
   */
  adapter.destroy = function destroy(connectionName, collectionName, options, cb) {
- 	// Find the record
    var db = registry.db(collectionName);
! 	adapter.find(connectionName,collectionName,options, function(err,docs) {
! 		async.each(docs,function(item,localCb) {
! 			db.destroy(item.id,item.rev,localCb);
! 		},cb);
! 	});
  };
  
  
--- 390,405 ----
   * @return {[type]}                  [description]
   */
  adapter.destroy = function destroy(connectionName, collectionName, options, cb) {
    var db = registry.db(collectionName);
! 
!   // Find the record
!   adapter.find(connectionName,collectionName,options, function(err,docs) {
!     async.each(docs,function(item) { // Shoud have only one.
!       db.destroy(item.id, item.rev, function(err, doc) {
!         cb(err,[doc]); // Waterline expects an array as result.
!       });
!     });
!   });
  };
  
  
***************
*** 447,465 ****
    var db = registry.db(collectionName);
  
    var coll = registry.collection(collectionName);
! 	/*
! 	console.log('------------------------------------------');
! 	console.log('Attempting merge on ',collectionName,id,attrs);
! 	console.log('------------------------------------------');
! 	*/
  
    if ('number' != typeof attempts) attempts = 0;
    else if (attempts > 0) {
!     var config = coll.adapter.config;
! 		// Reference to maxMergeAttempts
      if (attempts > 5) {
        return cb(new Error('max attempts of merging reached'));
! 		}
    }
  
    db.get(id, got);
--- 450,468 ----
    var db = registry.db(collectionName);
  
    var coll = registry.collection(collectionName);
!   /*
!   console.log('------------------------------------------');
!   console.log('Attempting merge on ',collectionName,id,attrs);
!   console.log('------------------------------------------');
!   */
  
    if ('number' != typeof attempts) attempts = 0;
    else if (attempts > 0) {
!     //var config = coll.adapter.config;
!     // Reference to maxMergeAttempts
      if (attempts > 5) {
        return cb(new Error('max attempts of merging reached'));
!     }
    }
  
    db.get(id, got);
***************
*** 473,500 ****
      _doc = docForReply(_doc);
  
      doc = merge(_doc, attrs);
! 		//console.log('----------Callbacks',coll._callbacks.beforeUpdate);
      async.eachSeries(coll._callbacks.beforeUpdate || [], invokeCallback, afterBeforeUpdate);
    }
  
    function invokeCallback(fn, cb) {
! 		//console.log("----------Calling Function ",fn);
      fn.call(null, doc, cb);
    }
  
    function afterBeforeUpdate(err) {
      if (err) return cb(err);
  
! 		var newdoc = docForIngestion(doc);
! 		//console.log('----------Heres our final doc',newdoc._id,newdoc._rev);
! 		//console.trace();
  
      db.insert(newdoc, id, saved);
    }
  
    function saved(err, reply) {
      if (err && err.status_code == 409) {
! 			//console.log('Calling merge again!');
        adapter.merge(connectionName, collectionName, id, attrs, cb, attempts + 1)
      }
      else if (err) cb(err);
--- 476,503 ----
      _doc = docForReply(_doc);
  
      doc = merge(_doc, attrs);
!     //console.log('----------Callbacks',coll._callbacks.beforeUpdate);
      async.eachSeries(coll._callbacks.beforeUpdate || [], invokeCallback, afterBeforeUpdate);
    }
  
    function invokeCallback(fn, cb) {
!     //console.log("----------Calling Function ",fn);
      fn.call(null, doc, cb);
    }
  
    function afterBeforeUpdate(err) {
      if (err) return cb(err);
  
!     var newdoc = docForIngestion(doc);
!     //console.log('----------Heres our final doc',newdoc._id,newdoc._rev);
!     console.trace();
  
      db.insert(newdoc, id, saved);
    }
  
    function saved(err, reply) {
      if (err && err.status_code == 409) {
!       //console.log('Calling merge again!');
        adapter.merge(connectionName, collectionName, id, attrs, cb, attempts + 1)
      }
      else if (err) cb(err);
